# Product Requirements Document: AI Health Assistant

## 1. Vision & Strategy

### 1.1. Vision
To be the most trusted, transparent, and user-friendly AI-powered guide to healthcare in Dubai. We clarify health concerns, provide transparent pricing, and connect users to the care they need with empathy and efficiency.

### 1.2. Core User Problem
Navigating the healthcare system is confusing, stressful, and opaque. Users struggle to get clear advice, understand costs, find the right facilities, and choose appropriate insurance.

### 1.3. Strategy
We will solve this by providing a single, intuitive chat interface that acts as a concierge, using AI to understand user needs and real-time data to provide actionable recommendations. Our focus is on a mobile-first experience that is professional, reassuring, and always helpful, even when live data is unavailable.

---

## 2. Core Features

### 2.1. AI-Powered Chat Interface
- **Description**: A mobile-first chat interface where users can ask health-related questions in natural language.
- **Requirements**:
  - Must be highly responsive and optimized for touch devices.
  - The chat input should always be accessible.
  - The assistant's response must be organized into three distinct tabs: Health Advice, Facilities & Pricing, and Insurance.
  - These three tabs must ALWAYS be present in every response to maintain a consistent user experience.

### 2.2. Health Advice Tab
- **Description**: Provides empathetic, safe, and general health advice based on the user's query.
- **Requirements**:
  - Every response must begin with a clear medical disclaimer.
  - The advice should be generated by a large language model (gpt-4-turbo).
  - The system must have a fallback mechanism to provide safe, generic advice if the primary AI call fails.
  - Content must be formatted with markdown for readability (headings, lists, bolding).

### 2.3. Facilities & Pricing Tab
- **Description**: Displays relevant healthcare facilities, medical services, and pricing information.
- **Requirements**:
  - The system must first attempt to fetch live data using a web scraper (`webSearch.ts`).
  - If live data fails, it MUST fall back to a curated list of local, contextual facilities (`getContextualFacilities`, `getContextualPricing`). The tab should never be empty.
  - The system must distinguish between emergency and non-emergency facilities based on query intent.
  - It must include pharmacy recommendations (`getPharmacyRecommendations`) when the query involves medication.
  - Information should be displayed in standardized, mobile-friendly cards (`ProcedureCard`, `EmergencyCard`).

### 2.4. Insurance Tab
- **Description**: Recommends relevant insurance plans.
- **Requirements**:
  - The system should attempt to find plans based on keywords derived from the user's query.
  - If no specific plans are found, it MUST fall back to a list of general, high-quality plans (`getFallbackInsurance`). This tab should never be empty.
  - Plans should be displayed in a standardized `InsuranceCard`.

---

## 3. Technical & Operational Requirements

### 3.1. Tech Stack
- **Framework**: Next.js (Version 15+)
- **Language**: TypeScript
- **Styling**: Tailwind CSS (Utility-First)
- **AI**: OpenAI API (gpt-4-turbo)
- **Live Data**: ScraperAPI for web scraping

### 3.2. Code Quality & Standards
- **Type Safety**: All code must be strictly typed. No implicit `any`. All data structures must conform to their defined interfaces.
- **Data Consistency**: Optional properties in interfaces should be omitted if not present, not set to `null`. Primitive types (e.g., `number` vs. `string`) must match their interface definitions.
- **Animations**: All animations must be done via custom CSS defined in `globals.css`. No third-party animation libraries (like `framer-motion`) are to be used, to prevent build issues.
- **Linting**: Code must pass ESLint checks as part of the build process. No unused variables.

### 3.3. Deployment & Maintenance
- **Platform**: Vercel
- **Process**: Continuous deployment from the `main` GitHub branch.
- **Monitoring**: Build logs on Vercel must be monitored. Common build errors and solutions are documented in `deployment.mdc`.
- **API Keys**: All API keys must be managed as environment variables in Vercel, not in the codebase.

## 4. System Integrity & Maintenance Tasks

To maintain the integrity of the system, the following tasks must be performed regularly:

- **Task: Update Fallback Data**: Regularly review and update the hard-coded fallback data for facilities, pricing, and insurance to ensure it remains relevant.
- **Task: Monitor Scraper Health**: Periodically check the success rate of the ScraperAPI to ensure the web scraping logic is functioning correctly. Implement logging to track failures.
- **Task: Review AI Prompts**: As user interaction patterns emerge, review and refine the system prompts sent to the OpenAI API to improve the quality of intent analysis and responses.
- **Task: Dependency Management**: Regularly update npm packages to their latest stable versions, paying close attention to major version changes in Next.js and its ecosystem.
- **Task: Rule Maintenance**: Keep the `.cursor/rules/` documentation up-to-date as new patterns are established or old ones are deprecated. 